version: '2.36.0'

networks:
  devnet:
    external: true
#    driver: bridge
#   driver_opts:
#      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"

services:
  cachara.postgres:
    image: postgres:16
    container_name: cachara-postgres
    hostname: cachara-postgres
    environment:
      - POSTGRES_USER=${Postgres_User:-postgres}
      - POSTGRES_PASSWORD=${Postgres_Password:-passwordD123}
      - POSTGRES_DB=${Postgres_Database:-cachara_db}
    ports:
      - 5432:5432
    volumes:
      - ./.containers/cachara-postgres:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - devnet

  postgres.configurator:
    image: postgres:16
    volumes:
      - ./init:/docker-entrypoint-initdb.d
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${Postgres_User:-postgres}
      - POSTGRES_PASSWORD=${Postgres_Password:-passwordD123}
      - POSTGRES_DB=${Postgres_Database:-cachara_db}
    depends_on:
      cachara.postgres:
        condition: service_healthy
    networks:
      - devnet


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


  cachara.api.gateway:
    image: cachara.api.gateway
    container_name: cachara-api-gateway
    hostname: cachara-api-gateway
    build:
      context: .
      dockerfile: Cachara.API.Gateway/Dockerfile
    ports:
      - "5000:5000"
      - "5001:5001"
    networks:
      - devnet

  cachara.users.api:
    image: cachara.users.api
    container_name: cachara-users-api
    hostname: cachara-users-api
    depends_on:
      cachara.sqlserver:
        condition: service_healthy
    build:
      context: .
      dockerfile: Cachara.API.Gateway/Dockerfile
    ports:
      - "5100:5100"
      - "5101:5101"
    networks:
      - devnet

  cachara.content.api:
    image: cachara.content.api
    container_name: cachara-content-api
    hostname: cachara-content-api
    depends_on:
      cachara.sqlserver:
        condition: service_healthy
    build:
      context: .
      dockerfile: Cachara.API.Gateway/Dockerfile
    ports:
      - "5200:5200"
      - "5201:5201"
    networks:
      - devnet

  cachara.graphql.api:
    image: cachara.graphql.api
    container_name: cachara-graphql-api
    hostname: cachara-graphql-api
    build:
      context: .
      dockerfile: Cachara.API.Gateway/Dockerfile
    ports:
      - "5300:5300"
      - "5301:5301"
    networks:
      - devnet

  cachara.seq:
    image: datalust/seq:latest
    container_name: cachara-seq
    hostname: cachara-seq
    restart: always
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:5341"
      - "8081:80"
    volumes:
      - ./.containers/cachara-seq:/data
    #command: >
    #  bash -c '
    #    seq config set -k api.listenUris -v https://cachara.logs,https://cachara.logs:45341 &&
    #    seq config set -k api.ingestionPort -v 45341 &&
    #    seq service restart
    #  '
    # https://docs.datalust.co/docs/urls#ingestion-port
    # https://docs.datalust.co/docs/getting-started-with-docker
    networks:
      - devnet
